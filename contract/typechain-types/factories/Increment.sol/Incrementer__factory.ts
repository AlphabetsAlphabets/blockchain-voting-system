/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  Incrementer,
  IncrementerInterface,
} from "../../Increment.sol/Incrementer";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
    ],
    name: "ValueIncremented",
    type: "event",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "value",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506000808190555061018a806100276000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633fa4f2451461003b578063d09de08a14610059575b600080fd5b610043610063565b60405161005091906100d6565b60405180910390f35b610061610069565b005b60005481565b600160008082825461007b9190610120565b925050819055507fc8a7fc4cfa989096cf36e066e6c623624d76311b81dfc4cb4729dcaa383512de6000546040516100b391906100d6565b60405180910390a1565b6000819050919050565b6100d0816100bd565b82525050565b60006020820190506100eb60008301846100c7565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061012b826100bd565b9150610136836100bd565b925082820190508082111561014e5761014d6100f1565b5b9291505056fea264697066735822122003eff67fe893107f1d943e0d6acf56f0d6aeee3020c5fc4a2fa104c1da0bec4a64736f6c63430008130033";

type IncrementerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IncrementerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Incrementer__factory extends ContractFactory {
  constructor(...args: IncrementerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Incrementer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Incrementer__factory {
    return super.connect(runner) as Incrementer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IncrementerInterface {
    return new Interface(_abi) as IncrementerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Incrementer {
    return new Contract(address, _abi, runner) as unknown as Incrementer;
  }
}
