/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type ProposalStruct = { name: string; votes: BigNumberish };

export type ProposalStructOutput = [name: string, votes: bigint] & {
  name: string;
  votes: bigint;
};

export interface ElectionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkElectionStatus"
      | "endTime"
      | "endVote"
      | "ended"
      | "getAllProposals"
      | "getProposalVotes"
      | "hasVoted"
      | "owner"
      | "proposalNames"
      | "proposals"
      | "startTime"
      | "vote"
      | "voterRegistry"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkElectionStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "endVote", values?: undefined): string;
  encodeFunctionData(functionFragment: "ended", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalVotes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "proposals", values: [string]): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "vote", values: [string]): string;
  encodeFunctionData(
    functionFragment: "voterRegistry",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkElectionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ended", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voterRegistry",
    data: BytesLike
  ): Result;
}

export interface Election extends BaseContract {
  connect(runner?: ContractRunner | null): Election;
  waitForDeployment(): Promise<this>;

  interface: ElectionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkElectionStatus: TypedContractMethod<[], [string], "view">;

  endTime: TypedContractMethod<[], [bigint], "view">;

  endVote: TypedContractMethod<[], [void], "nonpayable">;

  ended: TypedContractMethod<[], [boolean], "view">;

  getAllProposals: TypedContractMethod<[], [ProposalStructOutput[]], "view">;

  getProposalVotes: TypedContractMethod<[proposal: string], [bigint], "view">;

  hasVoted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposalNames: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  proposals: TypedContractMethod<
    [arg0: string],
    [[string, bigint] & { name: string; votes: bigint }],
    "view"
  >;

  startTime: TypedContractMethod<[], [bigint], "view">;

  vote: TypedContractMethod<[proposal: string], [bigint], "nonpayable">;

  voterRegistry: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkElectionStatus"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "endTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "endVote"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ended"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllProposals"
  ): TypedContractMethod<[], [ProposalStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getProposalVotes"
  ): TypedContractMethod<[proposal: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalNames"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: string],
    [[string, bigint] & { name: string; votes: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[proposal: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "voterRegistry"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  filters: {};
}
